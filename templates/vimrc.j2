" This file is generated by Ansible, all changes will be lost
"================================= FILES ===================================
" This must be first line, because it changes other options as a side effect
set nocompatible                    "stay IMproved (required for vundle to work):
set hidden                          " do not buffer file and do not store swap file of edited files

" Ignore files:
set wildignore=*.swp,*.bak,*.pyc,*.class
set directory=~/.vim/swp//,/tmp//   " directories for .swp files
"===========================================================================
"============================== LOCAL CONFIG ===============================
if filereadable($HOME . "/.vim.local/.vimrc.local")
    source ~/.vim.local/.vimrc.local
endif
"===========================================================================
"=============================== KEY MAPPINGS ==============================
" change the mapleader (default is \)
let mapleader= ","
"now we can do something like ':nnoremap ,d dd'

{% if 'wincent/command-t' in vim_github_plugins %}
"============================= COMMAND-T PLUGIN ============================
if filereadable(expand("{{ vim_root_command_t }}"))
    source {{ vim_root_command_t }}  " load emoji config
endif
"===========================================================================
{% endif %}
" non-recursive key-mapping for vim Normal Mode
" Make ; key to be the same s : key:
nnoremap ; :

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

"set paste" disables 'autoindent' and 'showmatch' so use pastetoggle F2 shortcut instead:
set pastetoggle=<F2>

nmap <F3> :NERDTreeToggle<CR>       " NERDTree PLUGIN

" handle misstypings
command! W :w                       " for mistyping :w as :W
command! Q :q                       " for mistyping :q as :Q
command! WQ :wq                     " for mistyping :wq as :WQ
"===========================================================================
"============================ TAB COMPLETION ===============================
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>
"===========================================================================
"====================== DELETE TRAILING WHITESPACES=========================
" Delete all Trailing White Spaces in all types of document except ruby,
" javascript, perl:
fun! StripTrailingWhitespace()
    " Only strip if the b:noStripeWhitespace variable isn't set
    if exists('b:noStripWhitespace')
        return
    endif
    %s/\s\+$//e
endfun

autocmd BufWritePre * call StripTrailingWhitespace()
autocmd FileType ruby,javascript,perl let b:noStripWhitespace=1
"===========================================================================
"============================ BREAK LINES ==================================
let &showbreak = '↳ '               " symbol shown on the left when long line is broken into multiple lines
set wrap                            " show long lines as multiple lines (for gpg, ssh keys etc.)
set cpoptions=n
"===========================================================================
" set look of tabs, trailing spaces, end of line characters etc.
set list listchars=tab:▸·,trail:·,precedes:←,extends:→  ",nbsp:‡,eol:§

highlight Underline cterm=underline

set laststatus=2                    " always display status line
set title                           " change the terminal's title
set visualbell                      " don't beep ()
set noerrorbells                    " don't beep (on errors)

set cursorline                      " highlight current line
set cursorcolumn                    " highlight current column
set ruler                           " show the cursor position all the time

" Show where 120 characters limit is - red vertical line on the right
set textwidth=120
set colorcolumn=+1

" mark the lines above 120 columns
highlight OverLength ctermbg=red ctermfg=white gui=undercurl guisp=red
match OverLength /\%121v.\+/

" mark the columns that are close to overlength limit
highlight LineProximity gui=undercurl guisp=orange
let w:m1=matchadd('LineProximity', '\%<121v.\%>115v', -1)

set number                          " always show line numbers
set showmatch                       " set show matching parenthesis

set hlsearch                        " highlight search terms
set incsearch                       " show search matches as you type
set ignorecase                      " ignore case when searching
set smartcase                       " ignore case if search pattern is all lowercase, case-sensitive otherwise

set history=1000                    " remember more commands and search history
set undolevels=1000                 " use many levels of undo
set viminfo='1000,f1,:1000,/1000

" undo
set undodir=~/.vim/undodir          " Undo directory
set undofile
set undolevels=1000                 " maximum number of changes that can be undoed
set undoreload=10000                " maximum number lines to save for undo on a buffer reload

set nolazyredraw                    " don't redraw screen while executing macros
set synmaxcol=125                   " stop rendering syntax colors in long lines (improves rendering performance)
set ttyscroll=3                     " improves redraw performance when scroll
set encoding=utf-8
set modifiable                      " Make a buffer modifiable (needed for setting fileformat to unix | mac | dos)
set fileformat=unix                 " endline set to \n

set cf                              " Enable error files & error jumping
set autowrite                       " automatically :w before running commands

" BASIC UI SETTINGS :
set shm=atIWswxrnmlf                " message formats
set showmode
set showcmd                         " show the command we're typing
"set mouse=a

set tabstop=4                       " a tab is four spaces
set softtabstop=4                   " delete tabs as one keystroke
set shiftwidth=4                    " number of spaces to use for autoindenting
set shiftround                      " use multiple of shiftwidth when indenting with '<' and '>'
set backspace=indent,eol,start      " allow backspacing over everything in insert mode
"set backspace=2                    " backspace deletes like most editors

set formatoptions-=cro              " DISABLE autocomment (enabled only for specific files at '.vim/after/tftplugin/')
"set formatoptions+=tcroql          " autocomment for '#, //, /**/' comments (does not work for .vim files like .vimrc)

set smarttab                        " insert tabs on the start of a line according to shiftwidth, not tabstop
set nosmartindent                   " adds indents to lines between { }. Removes indents when first symbol is '#'
set autoindent                      " always set autoindenting on
set copyindent                      " copy the previous indentation on autoindenting
set noexpandtab                     " do not convert tabs to spaces
"===========================================================================
"============================== COLORSCHEME ================================
set t_Co=256 " REQUIRED for Tmux

set background=dark
set t_ut=                           " disable Background Color Erase

if &t_Co >= 256 || has("gui_running")
    colorscheme {{ vim_colorscheme }}
{% if vim_colorscheme != 'mustang' %}
    "colorscheme mustang
{% endif %}
{% if vim_colorscheme != 'solarized' %}
    "colorscheme solarized
{% endif %}
endif

if &t_Co > 2 || has("gui_running") && !exists("syntax_on")
    syntax on   " switch syntax highlighting on, when the terminal has colors
endif

" SOLARIZED colorscheme
" Schedule automatic LIGHT/DARK background switching:
"let hour = strftime("%H")
"if 6 <= hour && hour < 18
"  set background=dark
"else
"  set background=light
"endif
"===========================================================================
"================================== TMUX ===================================
" Make color scheme look good in TMUX:
" Also make sure to add "export TERM='xterm-256color'" line in your ~/.bashrc
if exists('$TMUX')
    set term=screen-256color
endif
"===========================================================================
"=============================== POWERLINE =================================
" Linux :
"source /usr/local/lib/python2.7/site-packages/powerline/bindings/vim/plugin/powerline.vim

" Mac OS :
"source /Users/drew/Library/Python/2.7/lib/python/site-packages/powerline/bindings/vim/plugin/powerline.vim

" OR use Python to initialize Powerline:
"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
""python del powerline_setup  " NOT Sure if this needed (left here as info)

"let g:Powerline_symbols = 'fancy'
"===========================================================================
"================================ VUNDLE ===================================
if filereadable(expand("{{ vim_root_bundles }}"))
    source {{ vim_root_bundles }}   " load default plugin bundles
endif
"===========================================================================

{# PLUGINS CONFIGURATIONS #}
{# IF INSTALLING EMOJI ADD THIS: #}
{% if 'junegunn/vim-emoji' in vim_github_plugins %}
"================================ EMOJI ====================================
if filereadable(expand("{{ vim_root_emoji }}"))
    source {{ vim_root_emoji }}     " load emoji config
endif
"===========================================================================
{% endif %}

{# IF INSTALLING VIM-SIGNIFY ADD THIS: #}
{% if 'mhinz/vim-signify' in vim_github_plugins %}
"============================== VIM-AIRLINE ================================
if filereadable(expand("{{ vim_root_airline }}"))
    source {{ vim_root_signify }}   " load vim-signify config
endif

"===========================================================================
{% endif %}

{# IF INSTALLING VIM-AIRLINE ADD THIS: #}
{% if 'vim-airline/vim-airline' in vim_github_plugins %}
"============================== VIM-AIRLINE ================================
if filereadable(expand("{{ vim_root_airline }}"))
    source {{ vim_root_airline }}   " load vim-airline config
endif

"===========================================================================
{% endif %}

{# IF INSTALLING SYNTASTIC ADD THIS: #}
{% if 'vim-syntastic/syntastic' in vim_github_plugins %}
"=============================== SYNTASTIC =================================
if filereadable(expand("{{ vim_root_syntastic }}"))
    source {{ vim_root_syntastic }} " load syntastic config
endif
"===========================================================================
{% endif %}

{# IF INSTALLING DEVICONS ADD THIS: #}
{% if 'ryanoasis/vim-devicons' in vim_github_plugins %}
"=============================== DEVICONS ==================================
if filereadable(expand("{{ vim_root_devicons }}"))
    source {{ vim_root_devicons }} " load syntastic config
endif
"===========================================================================
{% endif %}

